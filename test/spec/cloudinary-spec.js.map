{
  "version": 3,
  "file": "cloudinary-spec.js",
  "sourceRoot": "",
  "sources": [
    "cloudinary-spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "describe 'Cloudinary', ->\n  cl = {}\n  fixtureContainer = undefined\n  protocol = if window.location.protocol == \"file:\" then \"http:\" else window.location.protocol\n\n  test_cloudinary_url = (public_id, options, expected_url, expected_options) ->\n    result = cl.url(public_id, options)\n    expect(new cloudinary.Transformation(options).toHtmlAttributes()).toEqual(expected_options);\n    expect(result).toEqual expected_url\n\n  beforeEach ->\n    if jQuery?\n      $.cloudinary = new (cloudinary.CloudinaryJQuery)(cloud_name: 'test123')\n      cl = $.cloudinary\n      fixtureContainer = $('<div id=\"fixture\" \" >')\n      fixtureContainer.appendTo 'body'\n    else\n      cl = new cloudinary.Cloudinary(cloud_name: 'test123')\n      fixtureContainer = document.createElement('div')\n      fixtureContainer.id=\"fixture\";\n      document.body.appendChild(fixtureContainer)\n\n  afterEach ->\n    fixtureContainer.remove()\n\n  it 'should use cloud_name from config', ->\n    test_cloudinary_url 'test', {}, protocol + '//res.cloudinary.com/test123/image/upload/test', {}\n\n  it 'should allow overriding cloud_name in options', ->\n    test_cloudinary_url 'test', { cloud_name: 'test321' }, protocol + '//res.cloudinary.com/test321/image/upload/test', {}\n\n  it 'should default to akamai if secure', ->\n    test_cloudinary_url 'test', { secure: true }, 'https://res.cloudinary.com/test123/image/upload/test', {}\n\n  it 'should default to akamai if secure is given with private_cdn and no secure_distribution', ->\n    test_cloudinary_url 'test', {\n      secure: true\n      private_cdn: true\n    }, 'https://test123-res.cloudinary.com/image/upload/test', {}\n\n  it 'should not add cloud_name if secure private_cdn and secure non akamai secure_distribution', ->\n    test_cloudinary_url 'test', {\n      secure: true\n      private_cdn: true\n      secure_distribution: 'something.cloudfront.net'\n    }, 'https://something.cloudfront.net/image/upload/test', {}\n\n  it 'should use protocol based on secure if given', ->\n    if window.location.protocol == 'http:'\n      test_cloudinary_url 'test', { secure: true }, 'https://res.cloudinary.com/test123/image/upload/test', {}\n      test_cloudinary_url 'test', { secure: false }, 'http://res.cloudinary.com/test123/image/upload/test', {}\n      test_cloudinary_url 'test', {}, 'http://res.cloudinary.com/test123/image/upload/test', {}\n    if window.location.protocol == 'https:'\n      test_cloudinary_url 'test', { secure: true }, 'https://res.cloudinary.com/test123/image/upload/test', {}\n      test_cloudinary_url 'test', { secure: false }, 'http://res.cloudinary.com/test123/image/upload/test', {}\n      test_cloudinary_url 'test', {}, 'https://res.cloudinary.com/test123/image/upload/test', {}\n\n  it 'should not add cloud_name if private_cdn and not secure', ->\n    test_cloudinary_url 'test', { private_cdn: true }, protocol + '//test123-res.cloudinary.com/image/upload/test', {}\n\n  it 'should use format from options', ->\n    test_cloudinary_url 'test', { format: 'jpg' }, protocol + '//res.cloudinary.com/test123/image/upload/test.jpg', {}\n\n\n  it 'should use type from options', ->\n    test_cloudinary_url 'test', { type: 'facebook' }, protocol + '//res.cloudinary.com/test123/image/facebook/test', {}\n\n  it 'should use resource_type from options', ->\n    test_cloudinary_url 'test', { resource_type: 'raw' }, protocol + '//res.cloudinary.com/test123/raw/upload/test', {}\n\n  it 'should ignore http links only if type is not given or is asset', ->\n    test_cloudinary_url 'http://example.com/', { type: undefined }, 'http://example.com/', {}\n    test_cloudinary_url 'http://example.com/', { type: 'asset' }, 'http://example.com/', {}\n    test_cloudinary_url 'http://example.com/', { type: 'fetch' }, protocol + '//res.cloudinary.com/test123/image/fetch/http://example.com/', {}\n\n  it 'should escape fetch urls', ->\n    test_cloudinary_url 'http://blah.com/hello?a=b', { type: 'fetch' }, protocol + '//res.cloudinary.com/test123/image/fetch/http://blah.com/hello%3Fa%3Db', {}\n\n  it 'should escape http urls', ->\n    test_cloudinary_url 'http://www.youtube.com/watch?v=d9NF2edxy-M', { type: 'youtube' }, protocol + '//res.cloudinary.com/test123/image/youtube/http://www.youtube.com/watch%3Fv%3Dd9NF2edxy-M', {}\n\n  it 'should support extenal cname', ->\n    test_cloudinary_url 'test', { cname: 'hello.com' }, protocol + '//hello.com/test123/image/upload/test', {}\n\n  it 'should support extenal cname with cdn_subdomain on', ->\n    test_cloudinary_url 'test', {\n      cname: 'hello.com'\n      cdn_subdomain: true\n    }, protocol + '//a2.hello.com/test123/image/upload/test', {}\n\n  it 'should support new cdn_subdomain format', ->\n    test_cloudinary_url 'test', { cdn_subdomain: true }, protocol + '//res-2.cloudinary.com/test123/image/upload/test', {}\n\n  it 'should support secure_cdn_subdomain false override with secure', ->\n    test_cloudinary_url 'test', {\n      secure: true\n      cdn_subdomain: true\n      secure_cdn_subdomain: false\n    }, 'https://res.cloudinary.com/test123/image/upload/test', {}\n\n  it 'should support secure_cdn_subdomain true override with secure', ->\n    test_cloudinary_url 'test', {\n      secure: true\n      cdn_subdomain: true\n      secure_cdn_subdomain: true\n      private_cdn: true\n    }, 'https://test123-res-2.cloudinary.com/image/upload/test', {}\n\n  it 'should support fetch_image', ->\n    tag = cl.fetch_image('http://example.com/hello.jpg?a=b')\n    result = cloudinary.Util.getAttribute(tag, 'src')\n    expect(result).toEqual protocol + '//res.cloudinary.com/test123/image/fetch/http://example.com/hello.jpg%3Fa%3Db'\n\n\n  it 'should add version if public_id contains /', ->\n    test_cloudinary_url 'folder/test', {}, protocol + '//res.cloudinary.com/test123/image/upload/v1/folder/test', {}\n    test_cloudinary_url 'folder/test', { version: 123 }, protocol + '//res.cloudinary.com/test123/image/upload/v123/folder/test', {}\n\n  it 'should not add version if public_id contains version already', ->\n    test_cloudinary_url 'v1234/test', {}, protocol + '//res.cloudinary.com/test123/image/upload/v1234/test', {}\n\n  it 'should allow to shorted image/upload urls', ->\n    test_cloudinary_url 'test', { shorten: true }, protocol + '//res.cloudinary.com/test123/iu/test', {}\n\n  it \"should support url_suffix in shared distribution\", ->\n    test_cloudinary_url(\"test\", {url_suffix:\"hello\"}, protocol + \"//res.cloudinary.com/test123/images/test/hello\", {})\n    test_cloudinary_url(\"test\", {url_suffix:\"hello\", angle: 0}, protocol + \"//res.cloudinary.com/test123/images/a_0/test/hello\", {})\n\n  it 'should disallow url_suffix in non upload types', ->\n    expect(->\n      cl.url 'test',\n        url_suffix: 'hello'\n        private_cdn: true\n        type: 'facebook'\n\n    ).toThrow()\n\n  it 'should disallow url_suffix with / or .', ->\n    expect(->\n      cl.url 'test',\n        url_suffix: 'hello/world'\n        private_cdn: true\n\n    ).toThrow()\n    expect(->\n      cl.url 'test',\n        url_suffix: 'hello.world'\n        private_cdn: true\n\n    ).toThrow()\n\n  it 'should support url_suffix for private_cdn', ->\n    test_cloudinary_url 'test', {\n      url_suffix: 'hello'\n      private_cdn: true\n    }, protocol + '//test123-res.cloudinary.com/images/test/hello', {}\n    test_cloudinary_url 'test', {\n      url_suffix: 'hello'\n      angle: 0\n      private_cdn: true\n    }, protocol + '//test123-res.cloudinary.com/images/a_0/test/hello', {}\n\n  it 'should put format after url_suffix', ->\n    test_cloudinary_url 'test', {\n      url_suffix: 'hello'\n      private_cdn: true\n      format: 'jpg'\n    }, protocol + '//test123-res.cloudinary.com/images/test/hello.jpg', {}\n\n  it 'should support url_suffix for raw uploads', ->\n    test_cloudinary_url 'test', {\n      url_suffix: 'hello'\n      private_cdn: true\n      resource_type: 'raw'\n    }, protocol + '//test123-res.cloudinary.com/files/test/hello', {}\n\n  it 'should support url_suffix for raw uploads', ->\n    test_cloudinary_url 'test', {\n      url_suffix: 'hello'\n      private_cdn: true\n      resource_type: 'image'\n      type: 'private'\n    }, protocol + '//test123-res.cloudinary.com/private_images/test/hello', {}\n\n  it 'should support use_root_path in shared distribution', ->\n    test_cloudinary_url 'test', {\n      use_root_path: true\n      private_cdn: false\n    }, protocol + '//res.cloudinary.com/test123/test', {}\n    test_cloudinary_url 'test', {\n      use_root_path: true\n      angle: 0\n      private_cdn: false\n    }, protocol + '//res.cloudinary.com/test123/a_0/test', {}\n\n  it 'should support root_path for private_cdn', ->\n    test_cloudinary_url 'test', {\n      use_root_path: true\n      private_cdn: true\n    }, protocol + '//test123-res.cloudinary.com/test', {}\n    test_cloudinary_url 'test', {\n      use_root_path: true\n      angle: 0\n      private_cdn: true\n    }, protocol + '//test123-res.cloudinary.com/a_0/test', {}\n\n  it 'should support globally set use_root_path for private_cdn', ->\n    cl.config('use_root_path', true)\n    test_cloudinary_url 'test', { private_cdn: true }, protocol + '//test123-res.cloudinary.com/test', {}\n    delete cl.config().use_root_path\n\n  it 'should support use_root_path together with url_suffix for private_cdn', ->\n    test_cloudinary_url 'test', {\n      use_root_path: true\n      private_cdn: true\n      url_suffix: 'hello'\n    }, protocol + '//test123-res.cloudinary.com/test/hello', {}\n\n  it 'should disallow use_root_path if not image/upload', ->\n    expect(->\n      cl.url 'test',\n        use_root_path: true\n        private_cdn: true\n        type: 'facebook'\n\n    ).toThrow()\n    expect(->\n      cl.url 'test',\n        use_root_path: true\n        private_cdn: true\n        resource_type: 'raw'\n\n    ).toThrow()\n\n  it 'should generate sprite css urls', ->\n    result = cl.sprite_css('test')\n    expect(result).toEqual protocol + '//res.cloudinary.com/test123/image/sprite/test.css'\n    result = cl.sprite_css('test.css')\n    expect(result).toEqual protocol + '//res.cloudinary.com/test123/image/sprite/test.css'\n\n  it 'should escape public_ids', ->\n    tests =\n      'a b': 'a%20b'\n      'a+b': 'a%2Bb'\n      'a%20b': 'a%20b'\n      'a-b': 'a-b'\n      'a??b': 'a%3F%3Fb'\n    for source of tests\n      test_cloudinary_url source, {}, protocol + '//res.cloudinary.com/test123/image/upload/' + tests[source], {}\n\n  it 'should accept public_id with special characters', ->\n    test_cloudinary_url 'public%id', {},  protocol + '//res.cloudinary.com/test123/image/upload/public%25id', {}\n\n  it 'should allow to override protocol', ->\n    options = 'protocol': 'custom:'\n    result = cl.url('test', options)\n    #expect(new Cloudinary.Transformation(options).toHtmlAttributes()).toEqual({});\n    expect(result).toEqual 'custom://res.cloudinary.com/test123/image/upload/test'\n\n  it 'should not fail on falsy public_id', ->\n    expect(cl.url(null)).toEqual null\n    expect(cl.url(undefined)).toEqual undefined\n\n  describe 'window.devicePixelRatio', ->\n    dpr = window.devicePixelRatio\n    options = {}\n    beforeEach ->\n      window.devicePixelRatio = 2\n      options = dpr: 'auto'\n\n    afterEach ->\n      window.devicePixelRatio = dpr\n\n    it 'should update dpr when creating an image tag using $.cloudinary.image()', ->\n      result = cl.image('test', options)\n      expect(cloudinary.Util.getAttribute(result, 'src')).toBe protocol + '//res.cloudinary.com/test123/image/upload/dpr_2.0/test'\n    describe \"round_dpr\", ->\n      describe \"false\", ->\n        it \"should not round up dpr\", ->\n          window.devicePixelRatio = 1.3\n          options.round_dpr = false\n          result = cl.image('test', options)\n          expect(cloudinary.Util.getAttribute(result, 'src')).toBe protocol + '//res.cloudinary.com/test123/image/upload/dpr_1.3/test'\n      describe \"true\", ->\n        it \"should round up DPR values\", ->\n          options.round_dpr = true\n          result = cl.image('test', options)\n          expect(cloudinary.Util.getAttribute(result, 'src')).toBe protocol + '//res.cloudinary.com/test123/image/upload/dpr_2.0/test'\n\n    if jQuery?\n      it 'should update dpr when creating an image tag using $(\\'<img/>\\').attr(\\'data-src\\', \\'test\\').cloudinary(options)', ->\n        result = $('<img/>').attr('data-src', 'test').cloudinary(options)\n        expect($(result).attr('src')).toEqual protocol + '//res.cloudinary.com/test123/image/upload/dpr_2.0/test'\n\n"
  ]
}