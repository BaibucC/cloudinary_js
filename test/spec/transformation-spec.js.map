{
  "version": 3,
  "file": "transformation-spec.js",
  "sourceRoot": "",
  "sources": [
    "transformation-spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "describe \"Transformation\", ->\n  cl = {}\n  fixtureContainer = undefined\n  protocol = if window.location.protocol == \"file:\" then \"http:\" else window.location.protocol\n  upload_path = \"#{protocol }//res.cloudinary.com/test123/image/upload\"\n  # copy cloudinary namespace for easy access\n  cloudinary.Util.assign(self, cloudinary)\n\n  test_cloudinary_url = (public_id, options, expected_url, expected_options) ->\n    result = cl.url(public_id, options)\n    expect(new cloudinary.Transformation(options).toHtmlAttributes()).toEqual(expected_options);\n    expect(result).toEqual expected_url\n\n  beforeEach ->\n    if jQuery?\n      $.cloudinary = new (cloudinary.CloudinaryJQuery)(cloud_name: 'test123')\n      cl = $.cloudinary\n      fixtureContainer = $('<div id=\"fixture\" \" >')\n      fixtureContainer.appendTo 'body'\n    else\n      cl = new cloudinary.Cloudinary(cloud_name: 'test123')\n      fixtureContainer = document.createElement('div')\n      fixtureContainer.id=\"fixture\";\n      document.body.appendChild(fixtureContainer)\n\n  it 'should ignore empty values', ->\n    expect(cl.url( 'test',\n      width: undefined , # regular\n      crop: 'crop',\n      flags: undefined, # array\n      startOffset: undefined, #range\n      transformation: undefined #transformation\n    )).toBe protocol + '//res.cloudinary.com/test123/image/upload/c_crop/test'\n    expect(cl.url( 'test',\n      width: '', # regular\n      crop: 'crop',\n      flags: [], # array\n      startOffset: [], #range\n      transformation: [] #transformation\n    )).toBe protocol + '//res.cloudinary.com/test123/image/upload/c_crop/test'\n    expect(cl.url( 'test',\n      width: '', # regular\n      crop: 'crop',\n      flags: [], # array\n      startOffset: '', #range\n      transformation: '' #transformation\n    )).toBe protocol + '//res.cloudinary.com/test123/image/upload/c_crop/test'\n    expect(cl.url( 'test',\n      transformation: {} #transformation\n    )).toBe protocol + '//res.cloudinary.com/test123/image/upload/test'\n\n  describe \"width and height\", ->\n    it 'should use width and height from options only if crop is given', ->\n      expect(cl.url('test',\n        width: 100\n        height: 100)).toBe protocol + '//res.cloudinary.com/test123/image/upload/test'\n      expect(cl.url('test',\n        width: 100\n        height: 100\n        crop: 'crop')).toBe protocol + '//res.cloudinary.com/test123/image/upload/c_crop,h_100,w_100/test'\n      expect(cl.url('test',\n        cloudinary.Transformation.new()\n        .width( 100)\n        .height( 100)\n        .crop( 'crop'))).toBe protocol + '//res.cloudinary.com/test123/image/upload/c_crop,h_100,w_100/test'\n\n    it 'should not pass width and height to html in case of fit, lfill or limit crop', ->\n      test_cloudinary_url 'test', {\n        width: 100\n        height: 100\n        crop: 'limit'\n      }, protocol + '//res.cloudinary.com/test123/image/upload/c_limit,h_100,w_100/test', {}\n      test_cloudinary_url 'test', {\n        width: 100\n        height: 100\n        crop: 'lfill'\n      }, protocol + '//res.cloudinary.com/test123/image/upload/c_lfill,h_100,w_100/test', {}\n      test_cloudinary_url 'test', {\n        width: 100\n        height: 100\n        crop: 'fit'\n      }, protocol + '//res.cloudinary.com/test123/image/upload/c_fit,h_100,w_100/test', {}\n      test_cloudinary_url 'test',\n        cloudinary.Transformation.new()\n        .width( 100)\n        .height( 100)\n        .crop( 'fit'), protocol + '//res.cloudinary.com/test123/image/upload/c_fit,h_100,w_100/test', {}\n\n    it 'should not pass width and height to html in case angle was used', ->\n      test_cloudinary_url 'test', {\n        width: 100\n        height: 100\n        crop: 'scale'\n        angle: 'auto'\n      }, protocol + '//res.cloudinary.com/test123/image/upload/a_auto,c_scale,h_100,w_100/test', {}\n    it \"should support auto width\", ->\n      test_cloudinary_url(\"test\", { width: \"auto:20\", crop: 'fill' }, \"#{upload_path}/c_fill,w_auto:20/test\", {})\n      test_cloudinary_url(\"test\", { width: \"auto:20:350\", crop: 'fill' }, \"#{upload_path}/c_fill,w_auto:20:350/test\", {})\n      test_cloudinary_url(\"test\", { width: \"auto:breakpoints\", crop: 'fill' }, \"#{upload_path}/c_fill,w_auto:breakpoints/test\", {})\n      test_cloudinary_url(\"test\", { width: \"auto:breakpoints_100_1900_20_15\", crop: 'fill' }, \"#{upload_path}/c_fill,w_auto:breakpoints_100_1900_20_15/test\", {})\n      test_cloudinary_url(\"test\", { width: \"auto:breakpoints:json\", crop: 'fill' }, \"#{upload_path}/c_fill,w_auto:breakpoints:json/test\", {})\n    it 'should support oh,ow', ->\n      test_cloudinary_url(\"test\", {width: \"ow\", height: \"oh\", crop: \"crop\"}, \"#{upload_path}/c_crop,h_oh,w_ow/test\", {})\n    it 'should support ih,iw', ->\n      test_cloudinary_url(\"test\", {width: \"iw\", height: \"ih\", crop: \"crop\"}, \"#{upload_path}/c_crop,h_ih,w_iw/test\", {})\n\n  it 'should support aspect_ratio', ->\n    test_cloudinary_url 'test', {\n      aspect_ratio: '1.0'\n    }, protocol + '//res.cloudinary.com/test123/image/upload/ar_1.0/test', {}\n    test_cloudinary_url 'test', {\n      aspect_ratio: '3:2'\n    }, protocol + '//res.cloudinary.com/test123/image/upload/ar_3:2/test', {}\n\n  it 'should use x, y, radius, prefix, gravity and quality from options', ->\n    test_cloudinary_url 'test', {\n      x: 1\n      y: 2\n      radius: 3\n      gravity: 'center'\n      quality: 0.4\n      prefix: 'a'\n    }, protocol + '//res.cloudinary.com/test123/image/upload/g_center,p_a,q_0.4,r_3,x_1,y_2/test', {}\n\n  describe \"gravity\", ->\n    it \"should support auto\", ->\n      test_cloudinary_url(\"test\", {width: 100, height: 100, crop: 'crop', gravity: 'auto'},\n        \"http://res.cloudinary.com/test123/image/upload/c_crop,g_auto,h_100,w_100/test\",\n        {width: 100, height: 100})\n      test_cloudinary_url(\"test\", {width: 100, height: 100, crop: 'crop', gravity: 'auto'},\n        \"http://res.cloudinary.com/test123/image/upload/c_crop,g_auto,h_100,w_100/test\",\n        {width: 100, height: 100})\n\n    it \"should support focal gravity\", ->\n      [\"adv_face\", \"adv_faces\", \"adv_eyes\", \"face\", \"faces\", \"body\", \"no_faces\"].map (focal)->\n        test_cloudinary_url(\"test\", {width:100, height:100, crop:'crop', gravity:\"auto:#{focal}\"},\n          \"http://res.cloudinary.com/test123/image/upload/c_crop,g_auto:#{focal},h_100,w_100/test\",\n          {width: 100, height: 100})\n\n    it \"should support auto level with thumb cropping\", ->\n      [0, 10, 100].map (level)->\n        test_cloudinary_url(\"test\", {width:100, height:100, crop:'thumb', gravity:\"auto:#{level}\"},\n          \"http://res.cloudinary.com/test123/image/upload/c_thumb,g_auto:#{level},h_100,w_100/test\",\n          {width: 100, height: 100})\n        test_cloudinary_url(\"test\", {width:100, height:100, crop:'thumb', gravity:\"auto:adv_faces:#{level}\"},\n          \"http://res.cloudinary.com/test123/image/upload/c_thumb,g_auto:adv_faces:#{level},h_100,w_100/test\",\n          {width: 100, height: 100})\n\n    it \"should support custom_no_override\", ->\n      test_cloudinary_url(\"test\", {width:100, height:100, crop:'crop', gravity:\"auto:custom_no_override\"},\n        \"http://res.cloudinary.com/test123/image/upload/c_crop,g_auto:custom_no_override,h_100,w_100/test\",\n        {width: 100, height: 100})\n\n  describe \":quality\", ->\n\n    it \"support a percent value\", ->\n      test_cloudinary_url \"test\", { x: 1, y: 2, radius: 3, gravity:\"center\", quality: 80, prefix: \"a\" },\n        \"#{upload_path}/g_center,p_a,q_80,r_3,x_1,y_2/test\", {}\n\n      test_cloudinary_url \"test\", { x: 1, y: 2, radius: 3, gravity:\"center\", quality: \"80:444\", prefix: \"a\" },\n        \"#{upload_path}/g_center,p_a,q_80:444,r_3,x_1,y_2/test\", {}\n    it \"should support auto value\", ->\n\n      test_cloudinary_url \"test\", { x: 1, y: 2, radius: 3, gravity:\"center\", quality: \"auto\", prefix: \"a\" },\n        \"#{upload_path}/g_center,p_a,q_auto,r_3,x_1,y_2/test\", {}\n\n      test_cloudinary_url \"test\", { x: 1, y: 2, radius: 3, gravity:\"center\", quality: \"auto:good\", prefix: \"a\" },\n        \"#{upload_path}/g_center,p_a,q_auto:good,r_3,x_1,y_2/test\", {}\n\n\n  it 'should support named tranformation', ->\n    test_cloudinary_url 'test', { transformation: 'blip' }, protocol + '//res.cloudinary.com/test123/image/upload/t_blip/test', {}\n\n  it 'should support array of named tranformations', ->\n    test_cloudinary_url 'test', { transformation: [\n      'blip'\n      'blop'\n    ] }, protocol + '//res.cloudinary.com/test123/image/upload/t_blip.blop/test', {}\n\n  it 'should support base tranformation', ->\n    expect(cl.url('test',\n      transformation:\n        x: 100\n        y: 100\n        crop: 'fill'\n      crop: 'crop'\n      width: 100)).toBe protocol + '//res.cloudinary.com/test123/image/upload/c_fill,x_100,y_100/c_crop,w_100/test'\n\n  it 'should support array of base tranformations', ->\n    expect(cl.url('test',\n      transformation: [\n        {\n          x: 100\n          y: 100\n          width: 200\n          crop: 'fill'\n        }\n        { radius: 10 }\n      ]\n      crop: 'crop'\n      width: 100)).toBe protocol + '//res.cloudinary.com/test123/image/upload/c_fill,w_200,x_100,y_100/r_10/c_crop,w_100/test'\n\n  it 'should not include empty tranformations', ->\n    expect(cl.url('test', transformation: [\n      {}\n      {\n        x: 100\n        y: 100\n        crop: 'fill'\n      }\n      {}\n    ])).toBe protocol + '//res.cloudinary.com/test123/image/upload/c_fill,x_100,y_100/test'\n\n  it 'should support size', ->\n    test_cloudinary_url 'test', {\n      size: '10x10'\n      crop: 'crop'\n    }, protocol + '//res.cloudinary.com/test123/image/upload/c_crop,h_10,w_10/test',\n      width: '10'\n      height: '10'\n\n  it 'should support background', ->\n    test_cloudinary_url 'test', { background: 'red' }, protocol + '//res.cloudinary.com/test123/image/upload/b_red/test', {}\n    test_cloudinary_url 'test', { background: '#112233' }, protocol + '//res.cloudinary.com/test123/image/upload/b_rgb:112233/test', {}\n\n  it 'should support default_image', ->\n    test_cloudinary_url 'test', { default_image: 'default' }, protocol + '//res.cloudinary.com/test123/image/upload/d_default/test', {}\n\n  it 'should support angle', ->\n    test_cloudinary_url 'test', { angle: 12 }, protocol + '//res.cloudinary.com/test123/image/upload/a_12/test', {}\n\n  it 'should support format for fetch urls', ->\n    test_cloudinary_url 'http://cloudinary.com/images/logo.png', {\n      type: 'fetch'\n      format: 'jpg'\n    }, protocol + '//res.cloudinary.com/test123/image/fetch/f_jpg/http://cloudinary.com/images/logo.png', {}\n\n  it 'should support effect', ->\n    test_cloudinary_url 'test', { effect: 'sepia' }, protocol + '//res.cloudinary.com/test123/image/upload/e_sepia/test', {}\n\n  it 'should support effect with param', ->\n    test_cloudinary_url 'test', { effect: [\n      'sepia'\n      -10\n    ] }, protocol + '//res.cloudinary.com/test123/image/upload/e_sepia:-10/test', {}\n\n  it 'should support density', ->\n    test_cloudinary_url 'test', { density: 150 }, protocol + '//res.cloudinary.com/test123/image/upload/dn_150/test', {}\n\n  it 'should support page', ->\n    test_cloudinary_url 'test', { page: 5 }, protocol + '//res.cloudinary.com/test123/image/upload/pg_5/test', {}\n\n  it 'should support border', ->\n    test_cloudinary_url 'test', { border: width: 5 }, protocol + '//res.cloudinary.com/test123/image/upload/bo_5px_solid_black/test', {}\n    test_cloudinary_url 'test', { border:\n      width: 5\n      color: '#ffaabbdd' }, protocol + '//res.cloudinary.com/test123/image/upload/bo_5px_solid_rgb:ffaabbdd/test', {}\n    test_cloudinary_url 'test', { border: '1px_solid_blue' }, protocol + '//res.cloudinary.com/test123/image/upload/bo_1px_solid_blue/test', {}\n\n  it 'should support flags', ->\n    test_cloudinary_url 'test', { flags: 'abc' }, protocol + '//res.cloudinary.com/test123/image/upload/fl_abc/test', {}\n    test_cloudinary_url 'test', { flags: [\n      'abc'\n      'def'\n    ] }, protocol + '//res.cloudinary.com/test123/image/upload/fl_abc.def/test', {}\n\n  it 'should support opacity', ->\n    test_cloudinary_url 'test', { opacity: 30 }, protocol + '//res.cloudinary.com/test123/image/upload/o_30/test', {}\n\n  it 'should support dpr', ->\n    test_cloudinary_url 'test', { dpr: 1 }, protocol + '//res.cloudinary.com/test123/image/upload/dpr_1.0/test', {}\n    test_cloudinary_url 'test', { dpr: 'auto' }, protocol + '//res.cloudinary.com/test123/image/upload/dpr_auto/test', {}\n    test_cloudinary_url 'test', { dpr: 1.5 }, protocol + '//res.cloudinary.com/test123/image/upload/dpr_1.5/test', {}\n\n  describe \"keyframe_interval\", ->\n    it 'should support keyframe_interval in options', ->\n      expect(Transformation.new( keyframe_interval: 10).toString()).toEqual(\"ki_10\")\n    it 'should support keyframeInterval()', ->\n      expect(Transformation.new().keyframeInterval(10).toString()).toEqual(\"ki_10\")\n  describe \"streaming_profile\", ->\n    it 'should support streaming_profile in options', ->\n      expect(Transformation.new( streaming_profile: \"somë-profilé\").toString()).toEqual(\"sp_somë-profilé\")\n    it 'should support streamingProfile()', ->\n      expect(Transformation.new().streamingProfile(\"somë-profilé\").toString()).toEqual(\"sp_somë-profilé\")\n\n  describe 'zoom', ->\n    it 'should support a decimal value', ->\n      test_cloudinary_url 'test', { zoom: 1.2 }, protocol + '//res.cloudinary.com/test123/image/upload/z_1.2/test', {}\n\n  describe 'window.devicePixelRatio', ->\n    dpr = window.devicePixelRatio\n    options = {}\n    beforeEach ->\n      window.devicePixelRatio = 2\n      options = dpr: 'auto'\n\n    afterEach ->\n      window.devicePixelRatio = dpr\n\n    it 'should update dpr when creating an image tag using $.cloudinary.image()', ->\n      result = cl.image('test', options)\n      expect(cloudinary.Util.getAttribute( result, 'src')).toBe protocol + '//res.cloudinary.com/test123/image/upload/dpr_2.0/test'\n\n  describe 'Conditional Transformation', ->\n    beforeEach ->\n      @cl = cloudinary.Cloudinary.new({cloud_name: \"sdk-test\"})\n    afterEach ->\n\n    describe 'with literal condition string', ->\n      it \"should include the if parameter as the first component in the transformation string\", ->\n        url = @cl.url(\"sample\", { if: \"w_lt_200\", crop: \"fill\", height: 120, width: 80} )\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_lt_200,c_fill,h_120,w_80/sample\")\n        url = @cl.url(\"sample\", { crop: \"fill\", height: 120, if: \"w_lt_200\", width: 80} )\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_lt_200,c_fill,h_120,w_80/sample\")\n\n      it \"should allow multiple conditions when chaining transformations \", ->\n        url = @cl.url(\"sample\", transformation: [{if: \"w_lt_200\",crop: \"fill\",height: 120, width: 80},\n          {if: \"w_gt_400\",crop: \"fit\",width: 150,height: 150},\n          {effect: \"sepia\"}])\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_lt_200,c_fill,h_120,w_80/if_w_gt_400,c_fit,h_150,w_150/e_sepia/sample\")\n      describe \"including spaces and operators\", ->\n        it \"should translate operators\", ->\n          url = @cl.url(\"sample\", { if: \"w < 200\", crop: \"fill\", height: 120, width: 80} )\n          expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_lt_200,c_fill,h_120,w_80/sample\")\n\n    describe 'if end', ->\n      it \"should include the if_end as the last parameter in its component\", ->\n        url = @cl.url(\"sample\", transformation: [{if: \"w_lt_200\"},\n          {crop: \"fill\", height: 120, width: 80,effect: \"sharpen\"},\n          {effect: \"brightness:50\"},\n          {effect: \"shadow\",color: \"red\"},\n          { if: \"end\"}])\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_lt_200/c_fill,e_sharpen,h_120,w_80/e_brightness:50/co_red,e_shadow/if_end/sample\")\n      it \"should support if_else with transformation parameters\", ->\n        url = @cl.url(\"sample\", transformation: [{if: \"w_lt_200\",crop: \"fill\",height: 120,width: 80},\n          {if: \"else\",crop: \"fill\",height: 90, width: 100}])\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_lt_200,c_fill,h_120,w_80/if_else,c_fill,h_90,w_100/sample\")\n      it \"if_else should be without any transformation parameters\", ->\n        url = @cl.url(\"sample\", transformation: [\n          {if: \"aspect_ratio_lt_0.7\"},\n          {crop: \"fill\",height: 120,width: 80},\n          {if: \"else\"},\n          {crop: \"fill\",height: 90,width: 100}])\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ar_lt_0.7/c_fill,h_120,w_80/if_else/c_fill,h_90,w_100/sample\")\n\n    describe 'Chaining with literal conditions', ->\n      it \"should add an if parameter\", ->\n        url = @cl.url(\"sample\", cloudinary.Transformation.new().if(\"ar_gt_3:4\").width(100).crop(\"scale\"))\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ar_gt_3:4,c_scale,w_100/sample\")\n\n    describe 'chaining conditions', ->\n\n      it \"should passing an operator and a value adds a condition\", ->\n        url = @cl.url(\"sample\", cloudinary.Transformation.new().if().aspectRatio(\"gt\", \"3:4\").then().width(100).crop(\"scale\"))\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ar_gt_3:4,c_scale,w_100/sample\")\n      it \"should chaining condition with `and`\", ->\n        url = @cl.url(\"sample\", cloudinary.Transformation.new().if().aspectRatio(\"gt\", \"3:4\").and().width( \"gt\", 100).then().width(50).crop(\"scale\"))\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ar_gt_3:4_and_w_gt_100,c_scale,w_50/sample\")\n      it \"should chain conditions with `or`\", ->\n        url = @cl.url(\"sample\", cloudinary.Transformation.new().if().aspectRatio(\"gt\", \"3:4\").and().width( \"gt\", 100).or().width(\"gt\", 200).then().width(50).crop(\"scale\"))\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ar_gt_3:4_and_w_gt_100_or_w_gt_200,c_scale,w_50/sample\")\n      it \"should translate operators\", ->\n        url = @cl.url(\"sample\", cloudinary.Transformation.new().if().aspectRatio(\">\", \"3:4\").and().width( \"<=\", 100).or().width(\"gt\", 200).then().width(50).crop(\"scale\"))\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ar_gt_3:4_and_w_lte_100_or_w_gt_200,c_scale,w_50/sample\")\n        url = @cl.url(\"sample\", cloudinary.Transformation.new().if().aspectRatio(\">\", \"3:4\").and().width( \"<=\", 100).or().width(\">\", 200).then().width(50).crop(\"scale\"))\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ar_gt_3:4_and_w_lte_100_or_w_gt_200,c_scale,w_50/sample\")\n        url = @cl.url(\"sample\", cloudinary.Transformation.new().if().aspectRatio(\">=\", \"3:4\").and().pageCount( \">=\", 100).or().pageCount(\"!=\", 0).then().width(50).crop(\"scale\"))\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ar_gte_3:4_and_pc_gte_100_or_pc_ne_0,c_scale,w_50/sample\")\n      it \"Chains transformations to an image tag\", ->\n        imgTag = @cl.imageTag(\"sample\")\n        imgHtml = imgTag.transformation().crop(\"fit\").width(1000).chain().crop(\"limit\").height(1000).toHtml()\n        url = new RegExp(\"http://res.cloudinary.com/sdk-test/image/upload/c_fit,w_1000/c_limit,h_1000/sample\") \n        expect(imgHtml).toMatch(url)\n      it \"Chains transformations with a private CDN configuration\", ->\n        imgTag = @cl.imageTag(\"sample\", {private_cdn: true})\n        imgHtml = imgTag.transformation().width(100).crop(\"scale\").chain().crop(\"crop\").width(200).toHtml()\n        url = new RegExp(\"http://sdk-test-res.cloudinary.com/image/upload/c_scale,w_100/c_crop,w_200/sample\") \n        expect(imgHtml).toMatch(url)\n      it \"Chains transformations to a secure configuration\", ->\n        imgTag = @cl.imageTag(\"sample\", {secure: true})\n        imgHtml = imgTag.transformation().width(100).crop(\"scale\").chain().crop(\"crop\").width(200).toHtml()\n        url = new RegExp(\"https://res.cloudinary.com/sdk-test/image/upload/c_scale,w_100/c_crop,w_200/sample\") \n        expect(imgHtml).toMatch(url)\n      it \"Chains transformations to a secure private CDN configuration\", ->\n        imgTag = @cl.imageTag(\"sample\", {secure: true, private_cdn: true})\n        imgHtml = imgTag.transformation().width(100).crop(\"scale\").chain().crop(\"crop\").width(200).toHtml()\n        url = new RegExp(\"https://sdk-test-res.cloudinary.com/image/upload/c_scale,w_100/c_crop,w_200/sample\") \n        expect(imgHtml).toMatch(url)\n      it \"should chain if_else conditions disregarding order of transformation parameters in string\", ->\n        url = @cl.url(\"sample\", {\"transformation\":[{\"if\":\"ils_gt_0.5\",\"width\":120,\"height\":150,\"crop\":\"pad\"},{\"if\":\"else\",\"width\":120,\"height\":150,\"crop\":\"fill\"}]})\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ils_gt_0.5,c_pad,h_150,w_120/if_else,c_fill,h_150,w_120/sample\")\n        paramsOrderUrl = @cl.url(\"sample\", {\"transformation\":[{\"crop\":\"pad\",\"height\":150,\"if\":\"ils_gt_0.5\",\"width\":120},{\"crop\":\"fill\",\"height\":150,\"if\":\"else\",\"width\":120}]})\n        expect(paramsOrderUrl).toEqual(url)\n      it \"should chain if_else conditions when explicitly ending the transformation\", ->\n        url = @cl.url(\"sample\", {\"transformation\":[{\"if\":\"ils_gt_0.5\"},{\"width\":120,\"height\":150,\"crop\":\"pad\"},{\"if\":\"else\"},{\"width\":120,\"height\":150,\"crop\":\"fill\"},{\"if\":\"end\"}]})\n        expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_ils_gt_0.5/c_pad,h_150,w_120/if_else/c_fill,h_150,w_120/if_end/sample\")\n\n      it \"should support and translate operators:  '=', '!=', '<', '>', '<=', '>=', '&&', '||'\", ->\n\n        allOperators =\n          'if_'           +\n          'w_eq_0_and'    +\n          '_h_ne_0_or'    +\n          '_ar_lt_0_and'   +\n          '_pc_gt_0_and'   +\n          '_fc_lte_0_and'  +\n          '_w_gte_0'      +\n          ',e_grayscale'\n\n        expect(cloudinary.Transformation.new().if()\n          .width(\"=\", 0).and()\n          .height(\"!=\", 0).or()\n          .aspectRatio(\"<\", 0).and()\n          .pageCount(\">\", 0).and()\n          .faceCount(\"<=\", 0).and()\n          .width(\">=\", 0)\n          .then().effect(\"grayscale\").serialize()).toEqual( allOperators)\n\n        expect(cloudinary.Transformation.new()\n          .if(\"w = 0 && height != 0 || aspectRatio < 0 and pageCount > 0 and faceCount <= 0 and width >= 0\")\n          .effect(\"grayscale\")\n          .serialize()).toEqual(allOperators)\n\n      describe 'endIf()', ->\n        it \"should serialize to 'if_end'\", ->\n          url = @cl.url(\"sample\", cloudinary.Transformation.new().if().width( \"gt\", 100).and().width(\"lt\", 200).then().width(50).crop(\"scale\").endIf())\n          expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_gt_100_and_w_lt_200/c_scale,w_50/if_end/sample\")\n        it \"force the if clause to be chained\", ->\n          url = @cl.url(\"sample\", cloudinary.Transformation.new().if().width( \"gt\", 100).and().width(\"lt\", 200).then().width(50).crop(\"scale\").endIf())\n          expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_gt_100_and_w_lt_200/c_scale,w_50/if_end/sample\")\n        it \"force the if_else clause to be chained\", ->\n          url = @cl.url(\"sample\", cloudinary.Transformation.new().if().width( \"gt\", 100).and().width(\"lt\", 200).then().width(50).crop(\"scale\").else().width(100).crop(\"crop\").endIf())\n          expect(url).toEqual(\"http://res.cloudinary.com/sdk-test/image/upload/if_w_gt_100_and_w_lt_200/c_scale,w_50/if_else/c_crop,w_100/if_end/sample\")\n\n\n  describe 'User Define Variables', ->\n    it \"array should define a set of variables\", ->\n      options = {\n        if: \"face_count > 2\",\n        variables: [ [\"$z\", 5], [\"$foo\", \"$z * 2\"] ],\n        crop: \"scale\", width: \"$foo * 200\"\n      }\n      t = new Transformation( options).toString()\n      expect(t).toEqual(\"if_fc_gt_2,$z_5,$foo_$z_mul_2,c_scale,w_$foo_mul_200\")\n    it \"'$key' should define a variable\", ->\n      options = { transformation: [\n        {$foo: 10 },\n        {if: \"face_count > 2\"},\n        {crop: \"scale\", width: \"$foo * 200 / face_count\"},\n        {if: \"end\"}\n      ] }\n      t = new Transformation( options).toString()\n      expect(t).toEqual(\"$foo_10/if_fc_gt_2/c_scale,w_$foo_mul_200_div_fc/if_end\")\n    it \"should sort variables\", ->\n      t = new Transformation( {$second: 1, $first: 2}).toString()\n      expect(t).toEqual(\"$first_2,$second_1\")\n    it \"should place ordered variables after individual variables\", ->\n      t = new Transformation( {variables: [[\"$z\", 5], [\"$foo\", \"$z * 2\"] ],$second: 1, $first: 2}).toString()\n      expect(t).toEqual(\"$first_2,$second_1,$z_5,$foo_$z_mul_2\")\n    it \"should support text values\", ->\n      test_cloudinary_url(\"sample\", {\n        effect: \"$efname:100\",\n        $efname: \"!blur!\"\n      }, \"http://res.cloudinary.com/test123/image/upload/$efname_!blur!,e_$efname:100/sample\", {})\n\n    it \"should support string interpolation\", ->\n      test_cloudinary_url(\"sample\", {\n        crop: \"scale\",\n        overlay: {text: \"$(start)Hello $(name)$(ext), $(no ) $( no)$(end)\", font_family: \"Arial\", font_size: \"18\"}\n      }, \"http://res.cloudinary.com/test123/image/upload/c_scale,l_text:Arial_18:$(start)Hello%20$(name)$(ext)%252C%20%24%28no%20%29%20%24%28%20no%29$(end)/sample\", {})\n\n  describe \"Layers\", ->\n    it \"should accept a string\", ->\n      transformation = new Transformation().overlay(\"text:hello\")\n      result = transformation.serialize()\n      expect(result).toEqual(\"l_text:hello\")\n    it \"should not pass width/height to html if overlay\", ->\n      transformation = new Transformation().overlay(\"text:hello\").width(100).height(100);\n      result = transformation.serialize()\n      expect(result).toEqual(\"h_100,l_text:hello,w_100\")\n      expect(transformation.toHtmlAttributes().height).toBeUndefined()\n      expect(transformation.toHtmlAttributes().width).toBeUndefined()\n    it \"should support fetch:URL\", ->\n      transformation = new Transformation().overlay(\"fetch:http://cloudinary.com/images/old_logo.png\");\n      result = transformation.serialize()\n      expect(result).toEqual(\"l_fetch:aHR0cDovL2Nsb3VkaW5hcnkuY29tL2ltYWdlcy9vbGRfbG9nby5wbmc=\")\n      transformation = new Transformation().overlay(\"fetch:https://upload.wikimedia.org/wikipedia/commons/2/2b/고창갯벌.jpg\");\n      result = transformation.serialize()\n      expect(result).toEqual(\"l_fetch:aHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8yLzJiLyVFQSVCMyVBMCVFQyVCMCVCRCVFQSVCMCVBRiVFQiVCMiU4Qy5qcGc=\")\n      \n\n    describe \"chained functions\", ->\n      it \"should produce a layer string\", ->\n        tests = [\n          [new Layer().publicId(\"logo\"), \"logo\"],\n          [new Layer().publicId(\"folder/logo\"), \"folder:logo\"],\n          [new Layer().publicId(\"logo\").type(\"private\"), \"private:logo\"],\n          [new Layer().publicId(\"logo\").format(\"png\"), \"logo.png\"],\n          [new Layer().resourceType(\"video\").publicId(\"cat\"), \"video:cat\"],\n          [new TextLayer().text(\"Hello World, Nice to meet you?\").fontFamily(\"Arial\").fontSize(18), \"text:Arial_18:Hello%20World%252C%20Nice%20to%20meet%20you%3F\"],\n          [new TextLayer().text(\"Hello World, Nice to meet you?\").fontFamily(\"Arial\").fontSize(19).fontWeight(\"bold\").fontStyle(\"italic\").letterSpacing(\"4\"),\n            \"text:Arial_19_bold_italic_letter_spacing_4:Hello%20World%252C%20Nice%20to%20meet%20you%3F\"],\n          [new SubtitlesLayer().publicId(\"sample_sub_en.srt\"), \"subtitles:sample_sub_en.srt\"],\n          [new SubtitlesLayer().publicId(\"sample_sub_he.srt\").fontFamily(\"Arial\").fontSize(40), \"subtitles:Arial_40:sample_sub_he.srt\"]\n        ]\n\n        tests.forEach (test)->\n          [layer, expected] = test\n          expect(layer.toString()).toEqual(expected )\n\n      describe \"TextLayer\", ->\n        describe \"fontStyle\", ->\n          it \"should throw an exception if fontFamily is not provided\", ->\n            expect( -> new TextLayer().fontStyle(\"italic\").toString()).toThrow()\n\n    describe \"using options\", ->\n      text_layer   = \"Hello World, /Nice to meet you?\"\n      text_encoded = \"Hello%20World%252C%20%252FNice%20to%20meet%20you%3F\"\n      layers_options= [\n        [\"string\", \"text:test_text:hello\", \"text:test_text:hello\"],\n        [\"explicit layer parameter\", \"text:test_text:#{text_encoded}\", \"text:test_text:#{text_encoded}\"],\n        [\"text parameter\", { public_id: \"test_text\", text: text_layer }, \"text:test_text:#{text_encoded}\"],\n        [\"text with font family and size parameters\", { text: text_layer, font_family: \"Arial\", font_size: \"18\" }, \"text:Arial_18:#{text_encoded}\"],\n        [\"text with text style parameter\", { text: text_layer, font_family: \"Arial\", font_size: \"18\", font_weight: \"bold\", font_style: \"italic\", letter_spacing: 4, line_spacing: 2 }, \"text:Arial_18_bold_italic_letter_spacing_4_line_spacing_2:#{text_encoded}\"],\n        [\"subtitles\", { resource_type: \"subtitles\", public_id: \"subtitles.srt\" }, \"subtitles:subtitles.srt\"],\n        [\"subtitles with font family and size\", { resource_type: \"subtitles\", public_id: \"subtitles.srt\", font_family: \"Arial\", font_size: \"40\" }, \"subtitles:Arial_40:subtitles.srt\"]\n      ]\n\n      layers =[\n        ['overlay', 'l'],\n        ['underlay', 'u']\n      ]\n      layers.forEach (layer)->\n        [param, short] = layer\n        describe param, ->\n          layers_options.forEach (test)->\n            [name, options, result] = test\n            it \"should support #{name}\", ()->\n              testOptions = {}\n              testOptions[param] = options\n              expect(new cloudinary.Transformation(testOptions).serialize()).toEqual( \"#{short}_#{result}\")\n          it 'should not pass width/height to html for ' + param, ()->\n            testOptions =\n              height: 100\n              width: 100\n            testOptions[param] = 'text:hello'\n            test_cloudinary_url 'test', testOptions, \"#{protocol}//res.cloudinary.com/test123/image/upload/h_100,#{short}_text:hello,w_100/test\", {}\n"
  ]
}