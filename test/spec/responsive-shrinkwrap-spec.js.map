{
  "version": 3,
  "file": "responsive-shrinkwrap-spec.js",
  "sourceRoot": "",
  "sources": [
    "responsive-shrinkwrap-spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "describe 'client side responsive', ->\n  if /phantom|HeadlessChrome/i.test(navigator.userAgent)\n    console.warn(\"Skipping responsive tests in PhantomJS or HeadlessChrome\")\n    return\n  defaultConfig = cloud_name: 'sdk-test'\n  cl = null\n  describe \"responsive\", ()->\n    fixtureContainer = undefined\n    testDocument = null\n    container = undefined\n    testWindow = null\n\n    beforeAll (done)->\n      # Open a new window with test HTML. A dynamic title is required in order to open a *new* window each time even if\n      # previous window was not closed.\n      testURL = \"responsive-shrinkwrap-test.html\"\n      testURL = \"/base/test/docRoot/#{testURL}\" if typeof __karma__ != \"undefined\"\n      testWindow = window.open(testURL, \"Cloudinary test #{(new Date()).toLocaleString()}\", \"width=500, height=500\")\n      testWindow.addEventListener 'karma-ready', ()=>\n          testDocument = testWindow.document\n          image1 = testDocument.getElementById('image1')\n          expect(image1).toBeDefined()\n          done()\n        , false\n\n    afterAll ()->\n      testWindow.close()\n\n    beforeEach ()->\n      cl = new cloudinary.Cloudinary(defaultConfig)\n      fixtureContainer = document.createElement('div')\n      fixtureContainer.id=\"fixture\";\n      document.body.appendChild(fixtureContainer)\n\n    afterEach ()->\n      fixtureContainer.remove()\n\n    triggerResize = (window)->\n      evt = window.document.createEvent('UIEvents')\n      evt.initUIEvent 'resize', true, false, window, 0\n      window.dispatchEvent evt\n\n    it 'should traverse up the DOM to find a parent that has clientWidth', ->\n      aContainer = undefined\n      divContainer = undefined\n      img = undefined\n      divContainer = document.createElement('div')\n      divContainer.style.width = 101\n      fixtureContainer.appendChild(divContainer)\n      aContainer = document.createElement('a')\n      divContainer.appendChild( aContainer)\n      img = cl.image('sample.jpg',\n        width: 'auto'\n        dpr: 'auto'\n        crop: 'scale'\n        responsive: true\n      )\n      aContainer.appendChild(img)\n      cl.responsive()\n      expect(img.getAttribute('src')).not.toEqual undefined\n\n    it 'should compute breakpoints correctly', ()->\n      el = document.createElement('img')\n      fixtureContainer.appendChild(el)\n      expect(cl.calc_breakpoint(el, 1)).toEqual 100\n      expect(cl.calc_breakpoint(el, 10)).toEqual 100\n      expect(cl.calc_breakpoint(el, 110)).toEqual 200\n      cl.config('breakpoints', [\n        50\n        150\n      ])\n      expect(cl.calc_breakpoint(el, 1)).toEqual 50\n      expect(cl.calc_breakpoint(el, 100)).toEqual 150\n      expect(cl.calc_breakpoint(el, 180)).toEqual 150\n\n      cl.config 'breakpoints', (width) ->\n        width / 2\n\n      expect(cl.calc_breakpoint(el, 100)).toEqual 50\n\n      el.setAttribute( 'data-breakpoints', '70,140')\n      expect(cl.calc_breakpoint(el, 1)).toEqual 70\n      expect(cl.calc_breakpoint(el, 100)).toEqual 140\n\n    it 'should correctly resize responsive images', (done) ->\n      container = undefined\n      img = undefined\n      dpr = cl.device_pixel_ratio()\n      container = document.createElement('div')\n      container.style.width = \"101px\"\n      fixtureContainer.appendChild(container)\n      img = cl.image('sample.jpg',\n          width: 'auto'\n          dpr: 'auto'\n          crop: 'scale'\n          responsive: true)\n      container.appendChild(img)\n      expect(img.getAttribute('src')).toBeFalsy()\n      expect(cloudinary.Util.hasClass(img, 'cld-responsive')).toBeTruthy()\n      cl.responsive()\n      expect(img.getAttribute('src')).toEqual window.location.protocol + '//res.cloudinary.com/sdk-test/image/upload/c_scale,dpr_' + dpr + ',w_200/sample.jpg'\n      container.style.width = \"211px\"\n      expect(img.getAttribute('src')).toEqual window.location.protocol + '//res.cloudinary.com/sdk-test/image/upload/c_scale,dpr_' + dpr + ',w_200/sample.jpg'\n      triggerResize window\n      window.setTimeout ()->\n          # wait(200)\n          expect(img.getAttribute('src')).toEqual window.location.protocol + '//res.cloudinary.com/sdk-test/image/upload/c_scale,dpr_' + dpr + ',w_300/sample.jpg'\n          container.style.width = \"101px\"\n          window.setTimeout ()->\n              # wait(200)\n              expect(img.getAttribute('src')).toEqual window.location.protocol + '//res.cloudinary.com/sdk-test/image/upload/c_scale,dpr_' + dpr + ',w_300/sample.jpg'\n              done()\n            , 200\n        , 200\n\n    it \"should not resize images with fixed width containers\", (done)->\n      image1 = testDocument.getElementById('image1')\n      src = image1.getAttribute('src')\n      expect(src).toBeDefined()\n      expect(src).not.toBe('')\n      currentWidth = src.match(/w_(auto:)?(breakpoints[_\\d]*:)?(\\d+)/)[3]\n      handler = ()->\n        src = image1.getAttribute('src')\n        expect(src).toBeDefined()\n        newWidth = src.match(/w_(\\d+)/)[1]\n        expect(newWidth).toEqual currentWidth\n        done()\n      testWindow.addEventListener 'resize', handler\n      testWindow.resizeBy(200,0)\n\n    describe \"responsive_class\", ->\n      it \"should set the class used for responsive functionality\", ->\n        img = cl.image( \"sample\", responsive: true, responsive_class: \"cl-foobar\")\n        expect(cloudinary.Util.hasClass(img, \"cl-foobar\")).toBeTruthy()\n\n"
  ]
}