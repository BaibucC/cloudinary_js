{
  "version": 3,
  "file": "tagspec.js",
  "sourceRoot": "",
  "sources": [
    "tagspec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "cl = {}\n\ngetTag = (tag)->\n  next = /<.*?>/.exec(tag)\n  if next\n    [tag.substr(next[0].length), next[0]]\n  else\n    [tag, null]\nprotocol = if window.location.protocol == \"file:\" then \"http:\" else window.location.protocol\nsimpleAssign = (dest, source)->\n  dest[key]= value for key, value of source\n  dest\n\nsimpleClone = (source)->\n  simpleAssign({}, source)\n\ntest_cloudinary_url = (public_id, options, expected_url, expected_options) ->\n  result = cl.url(public_id, options)\n  expect(new cloudinary.Transformation(options).toHtmlAttributes()).toEqual(expected_options)\n  expect(result).toEqual(expected_url)\n\ndescribe \"Cloudinary.HtmlTag\", ->\n  describe \"constructor\", ->\n    it 'should create a new tag with 3 parameters', ->\n      expect( -> new cloudinary.HtmlTag( 'div', \"publicId\", {})).not.toThrow()\n    it 'should create a new tag with 2 parameters', ->\n      expect( -> new cloudinary.HtmlTag( 'div', {})).not.toThrow()\n\nsharedExamples \"client_hints\", (options)->\n  it \"should not use data-src or set responsive class\", ->\n    image = cl.image('sample.jpg', options)\n    tag = image.outerHTML\n    expect(tag).toMatch( /<img.*>/)\n    expect(tag).not.toMatch(/<.*class.*>/)\n    expect(cloudinary.Util.getData(image, \"src\")).toBeFalsy()\n    expect(tag).toMatch( /src=[\"']http:\\/\\/res.cloudinary.com\\/sdk-test\\/image\\/upload\\/c_scale,dpr_auto,w_auto\\/sample.jpg[\"']/)\n  it \"should override responsive\", ->\n    cl.config().responsive = true\n    image = cl.image('sample.jpg', options)\n    tag = image.outerHTML\n    expect(tag).toMatch( /<img.*>/)\n    expect(tag).not.toMatch(/<.*class.*>/)\n    expect(cloudinary.Util.getData(image, \"src\")).toBeFalsy()\n    expect(tag).toMatch( /src=[\"']http:\\/\\/res.cloudinary.com\\/sdk-test\\/image\\/upload\\/c_scale,dpr_auto,w_auto\\/sample.jpg[\"']/)\n\ndescribe \"Cloudinary.ImageTag\", ->\n  config =\n    'cloud_name': 'test123'\n  beforeEach ->\n    cl = new cloudinary.Cloudinary( config)\n\n  DEFAULT_UPLOAD_PATH = \"#{protocol}//res.cloudinary.com/test123/image/upload/\"\n  it \"should create an image tag\", ()->\n    tag = new cloudinary.ImageTag( 'image_id', config).toHtml()\n    expect(tag).toBe(\"<img src=\\\"#{DEFAULT_UPLOAD_PATH}image_id\\\">\")\n  it \"should set data-src instead of src when using responsive\", ()->\n    tag = new cloudinary.ImageTag( 'image_id', cloudinary.Util.assign({responsive: true}, config)).toHtml()\n    expect(tag).toBe(\"<img data-src=\\\"#{DEFAULT_UPLOAD_PATH}image_id\\\">\")\n\n  describe \":client_hints\", ->\n    describe \"as option\", ->\n      includeContext \"client_hints\", {dpr: \"auto\", cloud_name: \"sdk-test\", width: \"auto\", crop: \"scale\", client_hints: true}\n    describe \"as global configuration\", ->\n      beforeEach ->\n        cl.config().client_hints = true\n      includeContext \"client_hints\", {dpr: \"auto\", cloud_name: \"sdk-test\", width: \"auto\", crop: \"scale\"}\n\n    describe \"false\", ->\n      it \"should use normal responsive behaviour\", ->\n        cl.config().responsive = true\n        image = cl.image('sample.jpg', {width: \"auto\", crop: \"scale\", cloud_name: \"sdk-test\", client_hints: false})\n        tag = image.outerHTML\n        expect(tag).toMatch( /<img.*>/)\n        expect(tag).toMatch( /class=[\"']cld-responsive[\"']/)\n        expect(cloudinary.Util.getData(image, \"src-cache\")).toMatch( /http:\\/\\/res.cloudinary.com\\/sdk-test\\/image\\/upload\\/c_scale,w_auto\\/sample.jpg/)\n    describe \"width\", ->\n      it \"supports auto width\", ->\n        tag = cl.image( 'sample.jpg', {crop: \"scale\", dpr: \"auto\", cloud_name: \"sdk-test\", width: \"auto:breakpoints\", client_hints: true}).outerHTML\n        expect(tag).toMatch( /src=[\"']http:\\/\\/res.cloudinary.com\\/sdk-test\\/image\\/upload\\/c_scale,dpr_auto,w_auto:breakpoints\\/sample.jpg[\"']/)\n    \n\ndescribe \"Cloudinary.VideoTag\", ->\n  VIDEO_UPLOAD_PATH = \"#{protocol}//res.cloudinary.com/test123/video/upload/\"\n  DEFAULT_UPLOAD_PATH = \"#{protocol}//res.cloudinary.com/test123/image/upload/\"\n  config =\n    cloud_name: \"test123\"\n    secure_distribution: null\n    private_cdn: false\n    secure: false\n    cname: null\n    cdn_subdomain: false\n    api_key: \"1234\"\n    api_secret: \"b\"\n  options = {}\n\n  beforeEach ->\n    cl = new cloudinary.Cloudinary( config)\n    options = simpleClone(config)\n\n  root_path = \"#{protocol}//res.cloudinary.com/test123\"\n  upload_path = \"#{root_path}/video/upload\"\n\n  describe \"constructor\", ->\n    v = new cloudinary.VideoTag(\"pubid\" )\n    it 'should create a new Cloudinary.VideoTag object', ->\n      expect(v.constructor.name).toBe(\"VideoTag\")\n#    it 'should support a hash value', ->\n#      test_cloudinary_url(\"video_id\", { resource_type: 'video', video_codec: { codec: 'h264', profile: 'basic', level: '3.1' } },\n#                          \"#{upload_path}/vc_h264:basic:3.1/video_id\", {})\n\n\n  it \"should generate video tag\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n    videoTag = new cloudinary.VideoTag(\"movie\", options).toHtml()\n    [videoTag, tag] = getTag(videoTag)\n    expect(tag).toBe(\"<video poster=\\\"#{expected_url}.jpg\\\">\")\n    [videoTag, tag] = getTag(videoTag)\n    expect(tag).toBe(\"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\")\n    [videoTag, tag] = getTag(videoTag)\n    expect(tag).toBe(\"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\")\n    [videoTag, tag] = getTag(videoTag)\n    expect(tag).toBe(\"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\")\n\n  it \"should generate video tag with html5 attributes\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n    videoTag = new cloudinary.VideoTag(\"movie\", simpleAssign({\n                                           autoplay: 1,\n                                           controls: true,\n                                           loop: true,\n                                           muted: \"true\",\n                                           preload: true,\n                                           style: \"border: 1px\"\n                                         }, options)).toHtml()\n    [videoTag, tag] = getTag(videoTag)\n    expect(tag).toBe(\"<video autoplay=\\\"1\\\" controls loop muted=\\\"true\\\" poster=\\\"#{expected_url}.jpg\\\" preload style=\\\"border: 1px\\\">\" )\n    [videoTag, tag] = getTag(videoTag)\n    expect(tag).toBe(\"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\")\n    [videoTag, tag] = getTag(videoTag)\n    expect(tag).toBe(\"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\")\n    [videoTag, tag] = getTag(videoTag)\n    expect(tag).toBe(\"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\")\n\n\n  it \"should generate video tag with various attributes\", ->\n    options2 = simpleAssign( options, {\n      source_types: \"mp4\",\n      html_height : \"100\",\n      html_width  : \"200\",\n      video_codec : {codec: \"h264\"},\n      audio_codec : \"acc\",\n      start_offset: 3\n    })\n    expected_url = VIDEO_UPLOAD_PATH + \"ac_acc,so_3,vc_h264/movie\"\n    expect(new cloudinary.VideoTag(\"movie\", options2).toHtml()).toEqual(\n      \"<video height=\\\"100\\\" poster=\\\"#{expected_url}.jpg\\\" src=\\\"#{expected_url}.mp4\\\" width=\\\"200\\\"></video>\")\n\n    delete options2['source_types']\n    tag = new cloudinary.VideoTag(\"movie\", options2).toHtml()\n    expect(tag).toContain(\"<video height=\\\"100\\\" poster=\\\"#{expected_url}.jpg\\\" width=\\\"200\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\")\n\n    delete options2['html_height']\n    delete options2['html_width']\n    options2['width'] = 250\n    options2['crop'] = 'scale'\n    expected_url = VIDEO_UPLOAD_PATH + \"ac_acc,c_scale,so_3,vc_h264,w_250/movie\"\n    expect(new cloudinary.VideoTag(\"movie\", options2).toHtml()).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\" width=\\\"250\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"</video>\")\n\n    expected_url = VIDEO_UPLOAD_PATH + \"ac_acc,c_fit,so_3,vc_h264,w_250/movie\"\n    options2['crop'] = 'fit'\n    expect(new cloudinary.VideoTag(\"movie\", options2).toHtml()).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"</video>\")\n\n  it \"should generate video tag with fallback\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n    fallback = \"<span id=\\\"spanid\\\">Cannot display video</span>\"\n    expect(new cloudinary.VideoTag(\"movie\", simpleAssign({fallback_content: fallback}, options)).toHtml()).toBe(\n      \"<video poster=\\\"#{expected_url}.jpg\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      fallback +\n      \"</video>\")\n    expect(new cloudinary.VideoTag(\"movie\", simpleAssign({fallback_content: fallback, source_types: \"mp4\"}, options)).toHtml()).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\" src=\\\"#{expected_url}.mp4\\\">\" +\n      fallback +\n      \"</video>\")\n\n\n  it \"should generate video tag with source types\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n    expect(cl.video(\"movie\", source_types: ['ogv', 'mp4'])).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"</video>\")\n\n  it \"should generate video tag with source transformation\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"q_50/c_scale,w_100/movie\"\n    expected_ogv_url = VIDEO_UPLOAD_PATH + \"q_50/c_scale,q_70,w_100/movie\"\n    expected_mp4_url = VIDEO_UPLOAD_PATH + \"q_50/c_scale,q_30,w_100/movie\"\n    expect(cl.video(\"movie\", width: 100, crop: \"scale\", transformation: {'quality': 50}, source_transformation: {'ogv': {'quality': 70}, 'mp4': {'quality': 30}})).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\" width=\\\"100\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_mp4_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_ogv_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"</video>\")\n\n    expect(cl.video(\"movie\", width: 100, crop: \"scale\", transformation: {'quality': 50}, source_transformation: {'ogv': {'quality': 70}, 'mp4': {'quality': 30}}, source_types: ['webm', 'mp4'])).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\" width=\\\"100\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_mp4_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"</video>\")\n\n  it \"should generate video tag with configurable poster\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n\n    expected_poster_url = 'http://image/somewhere.jpg'\n    expect(cl.video(\"movie\", poster: expected_poster_url, source_types: \"mp4\")).toEqual(\n      \"<video poster=\\\"#{expected_poster_url}\\\" src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n    expected_poster_url = VIDEO_UPLOAD_PATH + \"g_north/movie.jpg\"\n    expect(cl.video(\"movie\", poster: {'gravity': 'north'}, source_types: \"mp4\")).toEqual(\n      \"<video poster=\\\"#{expected_poster_url}\\\" src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n    expected_poster_url = DEFAULT_UPLOAD_PATH + \"g_north/my_poster.jpg\"\n    expect(cl.video(\"movie\", poster: {'gravity': 'north', 'public_id': 'my_poster', 'format': 'jpg'}, source_types: \"mp4\")).toEqual(\n      \"<video poster=\\\"#{expected_poster_url}\\\" src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n    expect(cl.video(\"movie\", poster: \"\", source_types: \"mp4\")).toEqual(\n      \"<video src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n    expect(cl.video(\"movie\", poster: false, source_types: \"mp4\")).toEqual(\n      \"<video src=\\\"#{expected_url}.mp4\\\"></video>\")\n  describe \"attributes\", ->\n    tag = cloudinary.HtmlTag.new(\"div\", { id: \"foobar\"})\n    describe \"removeAttr()\", ->\n      it \"should remove that attribute from the tag\", ->\n        tag.removeAttr(\"id\")\n        keys = for key of tag.attributes()\n          key\n        expect(keys).not.toContain(\"id\")\n\n\n  describe \"toDOM\", ->\n    element = cloudinary.HtmlTag.new(\"div\").toDOM()\n    it \"should generate a DOM Element\", ->\n      expect(element?.nodeType).toBe(1) # element\n      expect(element.tagName).toMatch /div/i\n\ndescribe \"ClientHintsMetaTag\", ->\n  it \"should generate a meta tag defining client hints\", ->\n    tag = new cloudinary.ClientHintsMetaTag().toHtml()\n    expect(tag).toBe('<meta content=\"DPR, Viewport-Width, Width\" http-equiv=\"Accept-CH\">')\n"
  ]
}