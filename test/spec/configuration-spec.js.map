{
  "version": 3,
  "file": "configuration-spec.js",
  "sourceRoot": "",
  "sources": [
    "configuration-spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "refresh = (name)->\n  delete require.cache[require.resolve(name)]\n  require(name)\n\ndescribe 'Configuration', ->\n  describe \"CLOUDINARY_URL environment variable\", ->\n    beforeAll ->\n\n    it \"should support api_key, api_secret, cloud_name\", ->\n      process?.env['CLOUDINARY_URL'] = 'cloudinary://key:secret@cloudname'\n\n      cloudinary.Configuration = refresh('../build/cloudinary-core').Configuration\n      config = new cloudinary.Configuration()\n      config.fromEnvironment()\n      expect(config.get(\"cloud_name\")).toEqual(\"cloudname\")\n      expect(config.get(\"api_key\")).toEqual(\"key\")\n      expect(config.get(\"api_secret\")).toEqual(\"secret\")\n      process?.env.CLOUDINARY_URL = 'cloudinary://key@cloudname'\n      cloudinary.Configuration = refresh('../build/cloudinary-core').Configuration\n      config = new cloudinary.Configuration()\n      config.fromEnvironment()\n      expect(config.get(\"cloud_name\")).toEqual(\"cloudname\")\n      expect(config.get(\"api_key\")).toEqual(\"key\")\n      expect(config.get(\"api_secret\")).toEqual(undefined)\n\n    it \"should support additional parameters\", ->\n      process?.env.CLOUDINARY_URL = 'cloudinary://key:secret@cloudname?foo=bar&one=two'\n      cloudinary.Configuration = refresh('../build/cloudinary-core').Configuration\n      config = new cloudinary.Configuration()\n      config.fromEnvironment()\n      expect(config.get(\"cloud_name\")).toEqual(\"cloudname\")\n      expect(config.get(\"api_key\")).toEqual(\"key\")\n      expect(config.get(\"api_secret\")).toEqual(\"secret\")\n      expect(config.get(\"foo\")).toEqual(\"bar\")\n      expect(config.get(\"one\")).toEqual(\"two\")\n\n    it \"should support secure_distribution\", ->\n      process?.env.CLOUDINARY_URL = 'cloudinary://key:secret@cloudname/private_cdn?foo=bar&one=two'\n      cloudinary.Configuration = refresh('../build/cloudinary-core').Configuration\n      config = new cloudinary.Configuration()\n      config.fromEnvironment()\n      expect(config.get(\"cloud_name\")).toEqual(\"cloudname\")\n      expect(config.get(\"api_key\")).toEqual(\"key\")\n      expect(config.get(\"api_secret\")).toEqual(\"secret\")\n      expect(config.get(\"foo\")).toEqual(\"bar\")\n      expect(config.get(\"one\")).toEqual(\"two\")\n      expect(config.get(\"private_cdn\")).toBeTruthy()\n      expect(config.get(\"secure_distribution\")).toEqual(\"private_cdn\")\n      process?.env.CLOUDINARY_URL = 'cloudinary://key@cloudname/private_cdn?foo=bar&one=two'\n      cloudinary.Configuration = refresh('../build/cloudinary-core').Configuration\n      config = new cloudinary.Configuration()\n      config.fromEnvironment()\n      expect(config.get(\"cloud_name\")).toEqual(\"cloudname\")\n      expect(config.get(\"api_key\")).toEqual(\"key\")\n      expect(config.get(\"api_secret\")).toEqual(undefined)\n      expect(config.get(\"foo\")).toEqual(\"bar\")\n      expect(config.get(\"one\")).toEqual(\"two\")\n      expect(config.get(\"private_cdn\")).toBeTruthy()\n      expect(config.get(\"secure_distribution\")).toEqual(\"private_cdn\")\n\n"
  ]
}