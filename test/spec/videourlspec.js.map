{
  "version": 3,
  "file": "videourlspec.js",
  "sourceRoot": "",
  "sources": [
    "videourlspec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "cl = {}\ntest_cloudinary_url = (public_id, options, expected_url, expected_options) ->\n  result = cl.url(public_id, options)\n  expect(new cloudinary.Transformation(options).toHtmlAttributes()).toEqual(expected_options)\n  expect(result).toEqual(expected_url)\n\nprotocol = if window.location.protocol == \"file:\" then \"http:\" else window.location.protocol\n\ndescribe \"Cloudinary::Utils\", ->\n  beforeEach ->\n    cl = new cloudinary.Cloudinary\n      cloud_name: \"test123\"\n      secure_distribution: null\n      private_cdn: false\n      secure: false\n      cname: null\n      cdn_subdomain: false\n      api_key: \"1234\"\n      api_secret: \"b\"\n  root_path = \"#{protocol}//res.cloudinary.com/test123\"\n  upload_path = \"#{root_path}/video/upload\"\n\n  describe \"cloudinary_url\", ->\n\n    describe \":fps\", ->\n      subject = (options)->\n        cl.url(\"fps\", options)\n      params = [\n        ['string range', 'fps_24-29.97', '24-29.97'],\n        ['integer', 'fps_24', 24],\n        ['array', 'fps_24-29.97', [24,29.97]],\n        ['range', 'fps_-24', -24],\n        ['float', 'fps_24.5', 24.5]\n      ]\n      for test in params\n        `var name, url_param, range`\n        [name, url_param, range ]= test\n        do(name, url_param, range) ->\n          describe \"when provided with #{name} #{range}\", ->\n            it \"should produce a range transformation in the format of #{url_param}\", ->\n              options = { resource_type: 'video', fps: range }\n              expect( new cloudinary.Transformation(options).toString() ).toEqual(url_param)\n            \n    describe \":video_codec\", ->\n      it 'should support a string value', ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', video_codec: 'auto' }, \"#{upload_path}/vc_auto/video_id\", {})\n      it 'should support a hash value', ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', video_codec: { codec: 'h264', profile: 'basic', level: '3.1' } },\n                            \"#{upload_path}/vc_h264:basic:3.1/video_id\", {})\n    describe \":audio_codec\", ->\n      it 'should support a string value', ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', audio_codec: 'acc' }, \"#{upload_path}/ac_acc/video_id\", {})\n    describe \":bit_rate\", ->\n      it 'should support an integer value', ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', bit_rate: 2048 }, \"#{upload_path}/br_2048/video_id\", {})\n      it 'should support \"<integer>k\" ', ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', bit_rate: '44k' }, \"#{upload_path}/br_44k/video_id\", {})\n      it 'should support \"<integer>m\"', ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', bit_rate: '1m' }, \"#{upload_path}/br_1m/video_id\", {})\n    describe \":audio_frequency\", ->\n      it 'should support an integer value', ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', audio_frequency: 44100 }, \"#{upload_path}/af_44100/video_id\", {})\n    describe \":video_sampling\", ->\n      it \"should support an integer value\", ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', video_sampling: 20 }, \"#{upload_path}/vs_20/video_id\", {})\n      it \"should support an string value in the a form of \\\"<float>s\\\"\", ->\n        test_cloudinary_url(\"video_id\", { resource_type: 'video', video_sampling: \"2.3s\" }, \"#{upload_path}/vs_2.3s/video_id\", {})\n    for short, long in { so: 'start_offset', eo: 'end_offset', du: 'duration' }\n      describe \":#{long}\", ->\n        it \"should support decimal seconds \", ->\n          op = { resource_type: 'video'}\n          op[long] = 2.63\n          test_cloudinary_url(\"video_id\", op, \"#{upload_path}/#{short}_2.63/video_id\", {})\n        it 'should support percents of the video length as \"<number>p\"', ->\n          op = { resource_type: 'video'}\n          op[long] = '35p'\n        test_cloudinary_url(\"video_id\", op, \"#{upload_path}/#{short}_35p/video_id\", {})\n        it 'should support percents of the video length as \"<number>%\"', ->\n          op = { resource_type: 'video'}\n          op[long] = '35%'\n        test_cloudinary_url(\"video_id\", op, \"#{upload_path}/#{short}_35p/video_id\", {})\n\n    describe \":offset\", ->\n      subject = (options)->\n        cl.url(\"video_id\", options)\n      params = [\n        ['string range', 'so_2.66,eo_3.21', '2.66..3.21'],\n        ['array', 'so_2.66,eo_3.21', [2.66, 3.21]],\n#        ['range of floats', 'so_2.66,eo_3.21', 2.66..3.21],\n        ['array of % strings', 'so_35p,eo_70p', [\"35%\", \"70%\"]],\n        ['array of p strings', 'so_35p,eo_70p', [\"35p\", \"70p\"]],\n        ['array of float percent', 'so_35.5p,eo_70.5p', [\"35.5p\", \"70.5p\"]]\n      ]\n      for test in params\n        [name, url_param, range ]= test\n\n        describe \"when provided with #{name} #{range}\", ->\n          it \"should produce a range transformation in the format of #{url_param}\", ->\n            options = { resource_type: 'video', offset: range }\n          #            expect( subject(options) ).to change { options }.to({})\n            url = cl.url(\"video_id\", options)\n#            expect( new cloudinary.Cloudinary.Transformation(options).toHtmlAttributes() ).toEqual( {})\n            matched = /([^\\/]*)\\/video_id$/.exec(url)\n            transformation = if matched then matched[1] else ''\n            # we can't rely on the order of the parameters so we sort them before comparing\n            expect(transformation.split(',').sort().reverse().join(',')).toEqual(url_param)\n          true\n        true\n    describe \"when given existing relevant parameters: 'quality', :background, :crop, :width, :height, :gravity, :overlay\", ->\n      for param, letter in { overlay: 'l', underlay: 'u' }\n        it \"should support #{param}\", ->\n          op = { resource_type: 'video'}\n          op[param ]= \"text:hello\"\n          test_cloudinary_url(\"test\", op, \"#{upload_path}/#{letter}_text:hello/test\", {})\n        it \"should not pass width/height to html for #{param}\", ->\n          op = { resource_type: 'video', height: 100, width: 100}\n          op[param ]= \"text:hello\"\n          test_cloudinary_url(\"test\", op, \"#{upload_path}/h_100,#{letter}_text:hello,w_100/test\", {})\n      it \"should produce the transformation string\", ->\n        test_cloudinary_url(\"test\", { resource_type: 'video', background: \"#112233\" }, \"#{upload_path}/b_rgb:112233/test\", {})\n        test_cloudinary_url(\"test\", {\n          resource_type: 'video',\n          x: 1, y: 2, radius: 3,\n          gravity: 'center',\n          quality: 0.4,\n          prefix: \"a\" }, \"#{upload_path}/g_center,p_a,q_0.4,r_3,x_1,y_2/test\", {})\n\n  describe 'cloudinary.video_thumbnail_url', ->\n    it \"should generate a cloudinary URI to the video thumbnail\", ->\n      source =  \"movie_id\"\n      options =  {cloud_name: \"test123\"}\n      path =  cl.video_thumbnail_url(source, options)\n      expect(path).toEqual(\"#{upload_path}/movie_id.jpg\")\n\ndescribe \"video\", ->\n  VIDEO_UPLOAD_PATH = \"#{protocol}//res.cloudinary.com/test123/video/upload/\"\n  DEFAULT_UPLOAD_PATH = \"#{protocol}//res.cloudinary.com/test123/image/upload/\"\n\n  beforeEach ->\n    cl = new cloudinary.Cloudinary(cloud_name: \"test123\", api_secret: \"1234\")\n\n  it \"should generate video tag\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n    tag = cl.video(\"movie\")\n    expect(tag).toContain(\"<video poster=\\\"#{expected_url}.jpg\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\")\n\n\n  it \"should generate video tag with html5 attributes\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n    tag = cl.video(\"movie\",\n                            autoplay: 1,\n                            controls: true,\n                            loop: true,\n                            muted: \"true\",\n                            preload: true,\n                            style: \"border: 1px\")\n    expect(tag).toContain(\"<video autoplay=\\\"1\\\" controls loop muted=\\\"true\\\" poster=\\\"#{expected_url}.jpg\\\" preload style=\\\"border: 1px\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\")\n    expect(tag).toContain(\"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\")\n\n\n  it \"should generate video tag with various attributes\", ->\n    options = {\n      source_types: \"mp4\",\n      html_height : \"100\",\n      html_width  : \"200\",\n      video_codec : {codec: \"h264\"},\n      audio_codec : \"acc\",\n      start_offset: 3\n    }\n    expected_url = VIDEO_UPLOAD_PATH + \"ac_acc,so_3,vc_h264/movie\"\n    expect(cl.video(\"movie\", options)).toEqual(\n      \"<video height=\\\"100\\\" poster=\\\"#{expected_url}.jpg\\\" src=\\\"#{expected_url}.mp4\\\" width=\\\"200\\\"></video>\")\n\n    delete options['source_types']\n    expect(cl.video(\"movie\", options)).toEqual(\n      \"<video height=\\\"100\\\" poster=\\\"#{expected_url}.jpg\\\" width=\\\"200\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"</video>\")\n\n    delete options['html_height']\n    delete options['html_width']\n    options['width'] = 250\n    options['crop'] = 'scale'\n    expected_url = VIDEO_UPLOAD_PATH + \"ac_acc,c_scale,so_3,vc_h264,w_250/movie\"\n    expect(cl.video(\"movie\", options)).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\" width=\\\"250\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"</video>\")\n\n    expected_url = VIDEO_UPLOAD_PATH + \"ac_acc,c_fit,so_3,vc_h264,w_250/movie\"\n    options['crop'] = 'fit'\n    expect(cl.video(\"movie\", options)).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"</video>\")\n\n  it \"should generate video tag with fallback\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n    fallback = \"<span id=\\\"spanid\\\">Cannot display video</span>\"\n    expect(cl.video(\"movie\", fallback_content: fallback),\n      \"<video poster=\\\"#{expected_url}.jpg\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      fallback +\n      \"</video>\")\n    expect(cl.video(\"movie\", fallback_content: fallback, source_types: \"mp4\")).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\" src=\\\"#{expected_url}.mp4\\\">\" +\n      fallback +\n      \"</video>\")\n\n\n  it \"should generate video tag with source types\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n    expect(cl.video(\"movie\", source_types: ['ogv', 'mp4'])).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\">\" +\n      \"<source src=\\\"#{expected_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"<source src=\\\"#{expected_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"</video>\")\n\n  it \"should generate video tag with source transformation\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"q_50/c_scale,w_100/movie\"\n    expected_ogv_url = VIDEO_UPLOAD_PATH + \"q_50/c_scale,q_70,w_100/movie\"\n    expected_mp4_url = VIDEO_UPLOAD_PATH + \"q_50/c_scale,q_30,w_100/movie\"\n    expect(cl.video(\"movie\", width: 100, crop: \"scale\", transformation: {'quality': 50}, source_transformation: {'ogv': {'quality': 70}, 'mp4': {'quality': 30}})).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\" width=\\\"100\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_mp4_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"<source src=\\\"#{expected_ogv_url}.ogv\\\" type=\\\"video/ogg\\\">\" +\n      \"</video>\")\n\n    expect(cl.video(\"movie\", width: 100, crop: \"scale\", transformation: {'quality': 50}, source_transformation: {'ogv': {'quality': 70}, 'mp4': {'quality': 30}}, source_types: ['webm', 'mp4'])).toEqual(\n      \"<video poster=\\\"#{expected_url}.jpg\\\" width=\\\"100\\\">\" +\n      \"<source src=\\\"#{expected_url}.webm\\\" type=\\\"video/webm\\\">\" +\n      \"<source src=\\\"#{expected_mp4_url}.mp4\\\" type=\\\"video/mp4\\\">\" +\n      \"</video>\")\n\n  describe \"poster\", ->\n    expected_url = VIDEO_UPLOAD_PATH + \"movie\"\n\n    it \"should accept a URL\", ->\n      expected_poster_url = 'http://image/somewhere.jpg'\n      expect(cl.video(\"movie\", poster: expected_poster_url, source_types: \"mp4\")).toEqual(\n        \"<video poster=\\\"#{expected_poster_url}\\\" src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n    it \"should accept an object\", ->\n      expected_poster_url = VIDEO_UPLOAD_PATH + \"g_north/movie.jpg\"\n      expect(cl.video(\"movie\", poster: {'gravity': 'north'}, source_types: \"mp4\")).toEqual(\n        \"<video poster=\\\"#{expected_poster_url}\\\" src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n    it \"should accept a different public ID\", ->\n      expected_poster_url = DEFAULT_UPLOAD_PATH + \"g_north/my_poster.jpg\"\n      expect(cl.video(\"movie\", poster: {'gravity': 'north', 'public_id': 'my_poster', 'format': 'jpg'}, source_types: \"mp4\")).toEqual(\n        \"<video poster=\\\"#{expected_poster_url}\\\" src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n    it \"should accept an empty string\", ->\n      expect(cl.video(\"movie\", poster: \"\", source_types: \"mp4\")).toEqual(\n        \"<video src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n    it \"should accept 'false'\", ->\n      expect(cl.video(\"movie\", poster: false, source_types: \"mp4\")).toEqual(\n        \"<video src=\\\"#{expected_url}.mp4\\\"></video>\")\n\n"
  ]
}