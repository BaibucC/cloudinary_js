{
  "version": 3,
  "file": "layer-spec.js",
  "sourceRoot": "",
  "sources": [
    "layer-spec.coffee"
  ],
  "names": [],
  "mappings": "AAAA,IAAA,UAAA,EAAA;;AAAA,SAAA,GAAY,UAAU,CAAC;;AACvB,UAAA,GAAa,UAAU,CAAC;;AACxB,QAAA,CAAS,WAAT,EAAsB,QAAA,CAAA,CAAA;SACpB,EAAA,CAAG,sCAAH,EAA2C,QAAA,CAAA,CAAA;AACzC,QAAA,KAAA,EAAA,OAAA,EAAA;IAAA,OAAA,GACE;MAAA,IAAA,EAAM,yBAAN;MACA,UAAA,EAAY,OADZ;MAEA,QAAA,EAAU;IAFV;IAGF,KAAA,GAAQ,IAAI,SAAJ,CAAc,OAAd;IACR,MAAA,CAAO,KAAK,CAAC,mBAAN,CAAA,CAAP,CAAmC,CAAC,OAApC,CAA4C,UAA5C;IACA,MAAA,CAAO,KAAK,CAAC,QAAN,CAAA,CAAP,CAAwB,CAAC,OAAzB,CAAiC,+CAAjC;IACA,cAAA,GAAiB,IAAI,cAAJ,CAAA,CAAoB,CAAC,OAArB,CAA6B,OAA7B,CAAqC,CAAC,QAAtC,CAAA;WACjB,MAAA,CAAO,cAAc,CAAC,QAAf,CAAA,CAAP,CAAiC,CAAC,OAAlC,CAA0C,iDAA1C;EATyC,CAA3C;AADoB,CAAtB;;AAYA,QAAA,CAAS,YAAT,EAAuB,QAAA,CAAA,CAAA;EACrB,EAAA,CAAG,oCAAH,EAAyC,QAAA,CAAA,CAAA;AACvC,QAAA;IAAA,KAAA,GAAQ,IAAI,UAAJ,CAAe;MAAC,GAAA,EAAK;IAAN,CAAf,CAAkE,CAAC,QAAnE,CAAA;WACR,MAAA,CAAO,KAAP,CAAa,CAAC,OAAd,CAAsB,gEAAtB;EAFuC,CAAzC;EAGA,EAAA,CAAG,wCAAH,EAA6C,QAAA,CAAA,CAAA;AAC3C,QAAA;IAAA,KAAA,GAAQ,IAAI,UAAJ,CAAe,2CAAf,CAA2D,CAAC,QAA5D,CAAA;WACR,MAAA,CAAO,KAAP,CAAa,CAAC,OAAd,CAAsB,gEAAtB;EAF2C,CAA7C;SAGA,EAAA,CAAG,6BAAH,EAAkC,QAAA,CAAA,CAAA;AAChC,QAAA,KAAA,EAAA;IAAA,KAAA,GAAQ,IAAI,UAAJ,CAAe,8DAAf,CAA8E,CAAC,QAA/E,CAAA;IACR,MAAA,CAAO,KAAP,CAAa,CAAC,OAAd,CAAsB,oIAAtB;IACA,cAAA,GAAiB,IAAI,cAAJ,CAAA,CAAoB,CAAC,OAArB,CACf;MAAA,YAAA,EAAc,OAAd;MACA,GAAA,EAAK;IADL,CADe;WAIjB,MAAA,CAAO,cAAc,CAAC,QAAf,CAAA,CAAP,CAAiC,CAAC,OAAlC,CAA0C,sIAA1C;EAPgC,CAAlC;AAPqB,CAAvB",
  "sourcesContent": [
    "TextLayer = cloudinary.TextLayer\nFetchLayer = cloudinary.FetchLayer\ndescribe \"TextLayer\", ->\n  it \"should serialize a text layer object\", ->\n    options =\n      text: \"Cloudinary for the win!\",\n      fontFamily: \"Arial\",\n      fontSize: 18\n    layer = new TextLayer(options)\n    expect(layer.textStyleIdentifier()).toEqual(\"Arial_18\")\n    expect(layer.toString()).toEqual(\"text:Arial_18:Cloudinary%20for%20the%20win%21\")\n    transformation = new Transformation().overlay(options).toString()\n    expect(transformation.toString()).toEqual(\"l_text:Arial_18:Cloudinary%20for%20the%20win%21\")\n    \ndescribe \"FetchLayer\", ->\n  it \"should serialize a fetch url layer\", ->\n    layer = new FetchLayer({url: 'http://res.cloudinary.com/demo/sample.jpg'}).toString()\n    expect(layer).toEqual('fetch:aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL3NhbXBsZS5qcGc=')\n  it \"should accept a url in the constructor\", ->\n    layer = new FetchLayer('http://res.cloudinary.com/demo/sample.jpg').toString()\n    expect(layer).toEqual('fetch:aHR0cDovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kZW1vL3NhbXBsZS5qcGc=')\n  it \"should support unicode URLs\", ->\n    layer = new FetchLayer(\"https://upload.wikimedia.org/wikipedia/commons/2/2b/고창갯벌.jpg\").toString()\n    expect(layer).toEqual(\"fetch:aHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8yLzJiLyVFQSVCMyVBMCVFQyVCMCVCRCVFQSVCMCVBRiVFQiVCMiU4Qy5qcGc=\")\n    transformation = new Transformation().overlay(\n      resourceType: 'fetch'\n      url: \"https://upload.wikimedia.org/wikipedia/commons/2/2b/고창갯벌.jpg\"\n    )\n    expect(transformation.toString()).toEqual(\"l_fetch:aHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8yLzJiLyVFQSVCMyVBMCVFQyVCMCVCRCVFQSVCMCVBRiVFQiVCMiU4Qy5qcGc=\")\n    "
  ]
}