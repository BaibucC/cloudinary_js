{
  "version": 3,
  "file": "chaining-spec.js",
  "sourceRoot": "",
  "sources": [
    "chaining-spec.coffee"
  ],
  "names": [],
  "mappings": "AAAA,IAAA,QAAA,EAAA,YAAA,EAAA;;AAAA,YAAA,GAAe,QAAA,CAAC,IAAD,EAAO,MAAP,CAAA;AACb,MAAA,GAAA,EAAA;EAAiB,KAAA,aAAA;;IAAjB,IAAK,CAAA,GAAA,CAAL,GAAW;EAAM;SACjB;AAFa;;AAIf,WAAA,GAAc,QAAA,CAAC,MAAD,CAAA;SACZ,YAAA,CAAa,CAAA,CAAb,EAAiB,MAAjB;AADY;;AAGd,QAAA,GAAc,MAAM,CAAC,QAAQ,CAAC,QAAhB,KAA4B,OAA/B,GAA4C,OAA5C,GAAyD,MAAM,CAAC,QAAQ,CAAC;;AAEpF,QAAA,CAAS,UAAT,EAAqB,QAAA,CAAA,CAAA;AACnB,MAAA,mBAAA,EAAA,iBAAA,EAAA,MAAA,EAAA;EAAA,iBAAA,GAAoB,CAAA,CAAA,CAAG,QAAH,CAAY,0CAAZ;EACpB,mBAAA,GAAsB,CAAA,CAAA,CAAG,QAAH,CAAY,0CAAZ;EACtB,MAAA,GACE;IAAA,UAAA,EAAY,SAAZ;IACA,mBAAA,EAAqB,IADrB;IAEA,WAAA,EAAa,KAFb;IAGA,MAAA,EAAQ,KAHR;IAIA,KAAA,EAAO,IAJP;IAKA,aAAA,EAAe,KALf;IAMA,OAAA,EAAS,MANT;IAOA,UAAA,EAAY;EAPZ;EAQF,OAAA,GAAU,CAAA;EACV,UAAA,CAAW,QAAA,CAAA,CAAA;WACT,OAAA,GAAU,WAAA,CAAY,MAAZ;EADD,CAAX;EAGA,QAAA,CAAS,2BAAT,EAAsC,QAAA,CAAA,CAAA;AACpC,QAAA,EAAA,EAAA;IAAA,EAAA,GAAK,UAAU,CAAC,UAAU,CAAC,GAAtB,CAAA;IACL,CAAA,GAAG,EAAE,CAAC,cAAH,CAAA;IACH,EAAA,CAAG,uCAAH,EAA4C,QAAA,CAAA,CAAA;aAC1C,MAAA,CAAO,CAAC,CAAC,WAAW,CAAC,IAArB,CAA0B,CAAC,IAA3B,CAAiC,gBAAjC;IAD0C,CAA5C;WAEA,EAAA,CAAG,mDAAH,EAAwD,QAAA,CAAA,CAAA;aACtD,MAAA,CAAO,CAAC,CAAC,SAAF,CAAA,CAAP,CAAqB,CAAC,IAAtB,CAA2B,EAA3B;IADsD,CAAxD;EALoC,CAAtC;SAOA,QAAA,CAAS,qBAAT,EAAgC,QAAA,CAAA,CAAA;WAC9B,EAAA,CAAG,mDAAH,EAAwD,QAAA,CAAA,CAAA;AACtD,UAAA,YAAA,EAAA;MAAA,YAAA,GAAe,iBAAA,GAAoB;MACnC,GAAA,GAAM,IAAI,UAAU,CAAC,UAAf,CAA0B,OAA1B,CAAkC,CAAC,QAAnC,CAA4C,OAA5C,CAAoD,CAAC,cAArD,CAAoE,KAApE,CACC,CAAC,cADF,CAAA,CAEC,CAAC,UAFF,CAEa,KAFb,CAGC,CAAC,SAHF,CAGY,KAHZ,CAIC,CAAC,UAJF,CAIa;QAAC,KAAA,EAAO;MAAR,CAJb,CAKC,CAAC,UALF,CAKa,KALb,CAMC,CAAC,WANF,CAMc,CANd,CAOC,CAAC,MAPF,CAAA;aAQN,MAAA,CAAO,GAAP,CAAW,CAAC,OAAZ,CACG,CAAA,4BAAA,CAAA,CAAkC,YAAlC,CAA+C,WAA/C,CAAA,CAA8D,YAA9D,CAA2E,0BAA3E,CADH;IAVsD,CAAxD;EAD8B,CAAhC;AAvBmB,CAArB",
  "sourcesContent": [
    "simpleAssign = (dest, source)->\n  dest[key]= value for key, value of source\n  dest\n\nsimpleClone = (source)->\n  simpleAssign({}, source)\n\nprotocol = if window.location.protocol == \"file:\" then \"http:\" else window.location.protocol\n\ndescribe \"Chaining\", () ->\n  VIDEO_UPLOAD_PATH = \"#{protocol}//res.cloudinary.com/test123/video/upload/\"\n  DEFAULT_UPLOAD_PATH = \"#{protocol}//res.cloudinary.com/test123/image/upload/\"\n  config =\n    cloud_name: \"test123\"\n    secure_distribution: null\n    private_cdn: false\n    secure: false\n    cname: null\n    cdn_subdomain: false\n    api_key: \"1234\"\n    api_secret: \"b\"\n  options = {}\n  beforeEach ->\n    options = simpleClone(config)\n\n  describe \"Cloudinary.transformation\", () ->\n    cl = cloudinary.Cloudinary.new();\n    t= cl.transformation()\n    it \"should return a transformation object\", () ->\n      expect(t.constructor.name).toBe( \"Transformation\")\n    it \"should return the calling object with getParent()\", ()->\n      expect(t.getParent()).toBe(cl)\n  describe \"Cloudinary.ImageTag\", ()->\n    it \"should generate video tag with various attributes\", ->\n      expected_url = VIDEO_UPLOAD_PATH + \"ac_acc,so_3,vc_h264/movie\"\n      tag = new cloudinary.Cloudinary(options).videoTag(\"movie\").setSourceTypes('mp4')\n             .transformation()\n             .htmlHeight(\"100\")\n             .htmlWidth(\"200\")\n             .videoCodec({codec: \"h264\"})\n             .audioCodec(\"acc\")\n             .startOffset(3)\n             .toHtml()\n      expect(tag).toEqual(\n         \"<video height=\\\"100\\\" poster=\\\"#{expected_url}.jpg\\\" src=\\\"#{expected_url}.mp4\\\" width=\\\"200\\\"></video>\")\n"
  ]
}